{{!-- <!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <meta http-equiv="X-UA-Compatible" content="ie=edge">
    <title>Puzzle</title>
    {{!-- <link rel="stylesheet" href="puzzle.css"> --}}
    {{!-- <link rel="stylesheet" href="puzzle.js"> --}}
    <link rel="icon" type="image/jpg" href="https://ak2.picdn.net/shutterstock/videos/1185382/thumb/1.jpg">
    <link rel="stylesheet" href="https://stackpath.bootstrapcdn.com/bootstrap/4.3.1/css/bootstrap.min.css" integrity="sha384-ggOyR0iXCbMQv3Xipma34MD+dH/1fQ784/j6cY/iJTQUOhcWr7x9JvoRxT2MZw1T" crossorigin="anonymous">
</head>

<style>
  body{
    background-color:#2b2c2c!important;
}
.all{
    height: 10rem;
    width: 10rem;
    cursor: pointer;
}
.all:hover{
    border: 5px solid black;
    
} 
.container{
  text-align: left
}

.puz{
  margin-left: 5rem;
}

#owl{
  height: 30rem;
}

.all{
  padding-bottom: 0.25rem
}

.all:active{
  
}


</style> 


<body>
  <h1>Puzzle</h1>  
  
{{!-- <img src="{{url('/images/mainowl.jpg')}}" alt="Image"/> --}}
  {{!-- <img src="/images/mainowl.jpg" alt=""> --}}
  {{!-- <div class="container">
    <div class="row">
      <div class="col-md-4">
          <img src="/images/owl1.jpg" id="owl1" alt="">
      </div>
      <div class="col-md-4">
        <img src="/images/owl2.jpg" id="owl2" alt="">
      </div>
      <div class="col-md-4">
                <img src="/images/owl3.jpg" id="owl3" alt="check"> 

      </div>
      <div class="col-md-4">
              <img src="/images/owl4.jpg" id="owl4" alt="">

      </div>
      <div class="col-md-4">
        <img src="/images/owl5.jpg" id="owl5" alt="">

      </div>
      <div class="col-md-4">
        <img src="/images/owl6.jpg" id="owl6" alt=""> 

      </div>
      <div class="col-md-4">
        <img src="/images/owl7.jpg" id="owl7" alt="">

      </div>
      <div class="col-md-4">
        <img src="/images/owl8.jpg" id="owl8" alt="">

      </div>
      <div class="col-md-4">
        <img src="/images/owl9.jpg" id="owl8" alt="">

      </div>
    </div>
  </div> --}}

{{!-- <div class="row">
  <div class="col-md-6">
  <div class="puz"> 
    <img src="/images/owl1.jpg" id="owl1" class="all" alt="">
    <img src="/images/owl2.jpg" id="owl2" class="all" alt="">
    <img src="/images/owl3.jpg" id="owl3" class="all" alt=""> <br>
    <img src="/images/owl4.jpg" id="owl4" class="all" alt="">
    <img src="/images/owl5.jpg" id="owl5" class="all" alt="">
    <img src="/images/owl6.jpg" id="owl6" class="all" alt=""> <br>
    <img src="/images/owl7.jpg" id="owl7" class="all" alt="">
    <img src="/images/owl8.jpg" id="owl8" class="all" alt="">
    <img src="/images/owl9.jpg" id="owl9" class="all" alt="">


  </div>
</div>

<div class="col-md-6">
<img src="/images/mainowl.jpg" id="owl" alt="">
</div>
</div>

    {{!-- <form action="">
      <button id="but" onclick="swap();">click</button>
    </form> --}}

    <button id="but"> clickooo</button>

</body> --}}

{{!-- <script type="text/javascript">

window.onload = function(){
    var owl1 = document.getElementById("owl1");
    var owl2 = document.getElementById("owl2");


    {{!-- owl1SRC=owl1.src;
  owl2SRC=owl2.src; --}}

but.onclick= function onclickfunc(owl1,owl2) {
    	var first = x.indexOf(parseInt(owl1, 10)),
			second = x.indexOf(parseInt(owl2, 10));
		x[first] = parseInt(owl2, 10);
		x[second] = parseInt(owl1, 10);
		return 0;

}

{{!-- 
function swap(){
  

  {{!-- owl1.src=owl2SRC;
  olw2.src=owl1SRC; --}}
}
   
    {{!-- swap(owl1,owl2);

    but.onclick =  function swap(var a,var b){
        var temp = a;
        a = b;
        b = temp;
        console.log("clicked!!!")
    } --}}
{{!-- 
    function swap(){
      var owl1,owl2;
      owl1=document.getElementById('owl1').src;
      owl2=document.getElementById('owl2').src;
      document.getElementById('owl2').src=owl1;
      document.getElementById('owl').src=owl2;
    } --}} --}}
} 

</script>


</html> --}} --}}

















<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <meta http-equiv="X-UA-Compatible" content="ie=edge">
    <title>Tic Tac Toe</title>
     <link rel="icon" type="image/jpg" href="https://miro.medium.com/max/783/1*81GhGbn6cnJycDP92rBDqQ.png">
    <!-- <link rel="stylesheet" href="https://stackpath.bootstrapcdn.com/bootstrap/4.3.1/css/bootstrap.min.css" integrity="sha384-ggOyR0iXCbMQv3Xipma34MD+dH/1fQ784/j6cY/iJTQUOhcWr7x9JvoRxT2MZw1T" crossorigin="anonymous"> -->
</head>
    <style>
        body {
    margin-top: 40px;
    background: #2b2c2c;
        color: #fff;
        font-family: Helvetica;
    font-weight: bold;
    text-align:center;
}

h1 {
    text-transform: uppercase;
    letter-spacing: 0.1em;
    color: #f1f1f1
    
}
.container {
    margin: 0 auto;
    width: 400px;
}

#game {
    width: 300px;
    height: 300px;
    border: 1px solid #dadada;
    margin: 0 auto;
    padding: 0;
    margin-bottom: 20px;
}

#game > li {
    list-style: none;
    float: left;
    overflow: hidden;
    text-decoration:none;
    width: 100px;
    height: 100px;
    background: #f1f1f1;
    border: 1px solid #ccc;
    border-right: 1px solid #fff;
    cursor: pointer;
    text-transform: uppercase;
    text-align: center;
    padding-top: 20px;
    -moz-box-sizing: border-box;
    box-sizing: border-box;
}

#game > li.x {
    font-size: 40px;
    color: orangered;
}

#game > li.o {
    font-size: 40px;
    color: #2b2c2c;
}

#game > li:hover {
    background: wheat;
}

#game > li:active {
    width: 100px;
    height: 100px;
    border: 0;
}

#nfo {
    text-align:center;
    margin-top: 10px;
}

#whos-turn > span,
#game-messages > span {
    display: none;
}

#whos-turn.x span.x,
#whos-turn.o span.o, 
#game-messages.player-x-win > span.player-x-win, 
#game-messages.player-o-win > span.player-o-win,
#game-messages.draw > span.draw {
    display: block;
    margin-top: 10px;
}

#reset-game {
    text-align: center;
        border: none;
        padding: 0.6em 1.2em;
        background: orangered;
        color: #fff;
        font-size: 1em;
        letter-spacing: 1px;
        text-transform: uppercase;
        cursor: pointer;
        display: inline-block;
        margin: 3px 2px;
        border-radius: 2px;
}

#reset-game:hover {
        background: #2c3e52;
}
    </style>
    <body>
        <div class="container">
            <h1 style="color: orangered; font-size: 3rem"><i>Tic-Tac-Toe</i></h1>
            <ul id="game">
                <!-- first row -->
                <li data-pos="0,0"></li>
                <li data-pos="0,1"></li>
                <li data-pos="0,2"></li>
                <!-- second row -->
                <li data-pos="1,0"></li>
                <li data-pos="1,1"></li>
                <li data-pos="1,2"></li>
                <!-- third row -->
                <li data-pos="2,0"></li>
                <li data-pos="2,1"></li> 
                <li data-pos="2,2"></li>
            </ul>
            
            <button id="reset-game">Reset Game</button>
            
            <!-- Game Messages -->
            <div id="game-messages">
                <span class="player-x-win">Player One Wins</span>
                <span class="player-o-win">Player Two Wins</span>
                <span class="draw">Draw Game</span>
            </div>
            
            <aside id="nfo">
                <h2>Who's Turn:</h2>
                <div id="whos-turn" class="x">
                    <span class="x">Player 1</span>
                    <span class="o">Player 2</span>
                </div>
                
                <h2>Score Card</h2>
                <div id="score">
                    Player 1: <span id="player-one-score">0</span> <br />
                    Player 2: <span id="player-two-score">0</span> <br />
                </div>
            </aside>
        </div>
    </body>

    <script>
        (function Game() {
    // Elements
    var game = document.getElementById('game');
    var boxes = document.querySelectorAll('li');
    var resetGame = document.getElementById('reset-game');
    var turnDisplay = document.getElementById('whos-turn');
    var gameMessages = document.getElementById('game-messages');
    var playerOneScoreCard = document.getElementById('player-one-score');
    var playerTwoScoreCard = document.getElementById('player-two-score');
    
    // Vars
    var context = { 'player1' : 'x', 'player2' : 'o' };
    var board = [];
    
    var playerOneScore = 0;
    var playerTwoScore = 0;
    
    var turns;
    var currentContext;
    
    // Constructor
    var init = function() {
        turns = 0;
        
        // Get current context
        currentContext = computeContext();
        
        // Setup 3 x 3 board 
        board[0] = new Array(3);
        board[1] = new Array(3);
        board[2] = new Array(3);
        
        // bind events
        for(var i = 0; i < boxes.length; i++) {
            boxes[i].addEventListener('click', clickHandler, false);
        }
        
        resetGame.addEventListener('click', resetGameHandler, false);
    }
    
    //Keeps track of player's turn
    var computeContext = function() {
        return (turns % 2 == 0) ? context.player1 : context.player2;
    }
    
    // Bind the dom element to the click callback
    var clickHandler = function() {
        this.removeEventListener('click', clickHandler);
        
        this.className = currentContext;
        this.innerHTML = currentContext;
        
        var pos = this.getAttribute('data-pos').split(',');
        board[pos[0]][pos[1]] = computeContext() == 'x' ? 1 : 0;
        
        if(checkStatus()) {
            gameWon();
        }
        
        turns++;
        currentContext = computeContext();
        turnDisplay.className = currentContext;
    }
    
    
    // Check to see if player has won
    var checkStatus = function() {
        var used_boxes = 0;
        
        for(var rows = 0; rows < board.length; rows++ ) {
            var row_total = 0;
            var column_total = 0;
            
            for(var columns = 0; columns < board[rows].length; columns++) {
                row_total += board[rows][columns];
                column_total += board[columns][rows];
                
                if(typeof board[rows][columns] !== "undefined") {
                    used_boxes++;
                }
            }
            
            // Winning combination for diagonal scenario [0,4,8], [2,4,6]
            var diagonal_tl_br = board[0][0] + board[1][1] + board[2][2]; // diagonal top left to bottom right
            var diagonal_tr_bl = board[0][2] + board[1][1] + board[2][0]; // diagonal top right bottom left
            
            if(diagonal_tl_br == 0 || diagonal_tr_bl == 0 || diagonal_tl_br == 3 || diagonal_tr_bl == 3) {
                return true;
            }
            
            // Winning combination for row [0,1,2], [3,4,5], [6,7,8]
            // Winning combination for column [0,3,6], [1,4,7], [2,5,8]
            // Only way to win is if the total is 0 or if the total is 3. X are worth 1 point and O are worth 0 points
            if(row_total == 0 || column_total == 0 || row_total == 3 || column_total == 3) {
                return true;
            }
            
            // if all boxes are full - Draw!!!
            if(used_boxes == 9) {
                gameDraw();
            }
        }
    }
    var gameWon = function() {
        clearEvents();
        
        // show game won message
        gameMessages.className = 'player-' + computeContext() + '-win';
        
        // update the player score
        switch(computeContext()) {
            case 'x':
                playerOneScoreCard.innerHTML = ++playerOneScore;
                break;
            case 'o':
                playerTwoScoreCard.innerHTML = ++playerTwoScore;
        }
    }
    // Tells user when game is a draw.
    var gameDraw = function() {
        gameMessages.className = 'draw';
        clearEvents();
    }
    
    // Stops user from clicking empty cells after game is over
    var clearEvents = function() {
        for(var i = 0; i < boxes.length; i++) {
            boxes[i].removeEventListener('click', clickHandler);
        }
    }
    // Reset game to play again
    var resetGameHandler = function() {
        clearEvents();
        init();
        
        // Go over all the li nodes and remove className of either x,o
        // clear out innerHTML
        for(var i = 0; i < boxes.length; i++) {
            boxes[i].className = '';
            boxes[i].innerHTML = '';
        }
        
        // Change Who's turn class back to player1
        turnDisplay.className = currentContext;
        gameMessages.className = '';
    }
    
    game && init();
})();
    </script>
</html>